pipeline {
    agent any
    tools{
        maven 'M2_HOME'
        
    }
    environment {
        registry = '076892551558.dkr.ecr.us-east-1.amazonaws.com/geolocation_ecr_rep'
        dockerimage = '' 
    }
    stages {
        stage('Checkout'){
            steps{
                git branch: 'main', url: 'https://github.com/dodzi2022/geoMVPX0.git'
            }
        }
       stage('SonarQube analysis') {
           steps{
                   
                   
                   sh "/opt/sonar-scanner/bin/sonar-scanner -X \
                   -D sonar.organisation=dodzi2022 \
                   -D sonar.login=8739b5ca19d023862eb4539e1cdb59a48e682cac \
                   -D sonar.projectKey=dodzi2022_geoMVPX0 \
                   -D sonar.sources=src \
                   -D sonar.java.binaries=. \
                   -D sonar.host.url=https://sonarcloud.io \
                   -Dorg.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL=86400"
       
        
    }
  }    
        stage('Code Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        // Building Docker images
        stage('Building image') {
            steps{
                script {
                    dockerImage = docker.build registry
                }
            }
        }
        // Uploading Docker images into AWS ECR
        stage('Pushing to ECR') {
            steps{
                script {
                    sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 076892551558.dkr.ecr.us-east-1.amazonaws.com'
                    sh 'docker push 076892551558.dkr.ecr.us-east-1.amazonaws.com/geolocation_ecr_rep:latest'
                }
            }
        }
        //deploy the image that is in ECR to our EKS cluster
        stage ("Kube Deploy") {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'eks_credential', namespace: '', serverUrl: '') {
                 sh "kubectl apply -f eks-deploy-from-ecr.yaml"
                }
            }
        }
    }
}
